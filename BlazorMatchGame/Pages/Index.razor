@page "/"
@using System.Timers;

<PageTitle>Index</PageTitle>

<style>
    .container{
        width: 400px;
    }
    button{
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

@code{
    List<string> animalEmoji = new List<string>()
    {
        "🐮", "🐮",
        "🐶", "🐶",
        "🐑", "🐑",
        "🐐", "🐐",
        "🐈", "🐈",
        "🐍", "🐍",
        "🐘", "🐘",
        "🦘", "🦘",
    };

    List<string> shuffledAnimals = new List<string>();
    int matchesFound;
    Timer timer;
    int tenthsOfSecond = 0;
    string timeDisplay;

    protected override void OnInitialized()
    {
        timer = new Timer(1000);
        timer.Elapsed += Timer_Tick;
        SetUpGame();
    }

    private void SetUpGame()
    {
        tenthsOfSecond = 0;
        Random random = new Random();
        shuffledAnimals = animalEmoji.OrderBy(item => random.Next()).ToList();
        matchesFound = 0;
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;

    private void ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            lastAnimalFound = animal;
            lastDescription = animalDescription;
            timer.Start();
        }
        else if (lastAnimalFound == animal && animalDescription != lastDescription)
        {
            lastAnimalFound = string.Empty;

            shuffledAnimals = shuffledAnimals.Select(a => a.Replace(animal, string.Empty)).ToList();
            matchesFound++;
            if (matchesFound == 8)
            {
                timer.Stop();
                timeDisplay += "PlayAgain?";
                SetUpGame();
            }
        }
        else
        {
            lastAnimalFound = string.Empty;
        }
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecond++;
            timeDisplay = (tenthsOfSecond / 10F).ToString("0.0s");
            StateHasChanged();
        });
    }
}

<div class="container">
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var lastDescription = $"Button {animalNumber}";
            <div class="col-3">
                <button type="button" class="btn btn-outline-dark" @onclick="@(() => ButtonClick(animal, lastDescription))">
                    <h1>@shuffledAnimals[animalNumber]</h1>
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>

</div>